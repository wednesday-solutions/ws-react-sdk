{"version":3,"file":"services.js","sources":["../../src/utils/index.js","../../src/services/cognito.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { message as notification, Select } from 'antd';\nimport icError from '@images/ic-error.svg';\nimport icSuccess from '@images/ic-success.svg';\nimport icWarning from '@images/ic-warning.svg';\nimport { getCountryCodeAndStrippedNumber } from '@utils/validationUtils';\nimport loadable from './loadable';\n\nconst { Option } = Select;\n\nexport const NOTIFICATION_TYPE = {\n  SUCCESS: 1,\n  ERROR: 2,\n  WARNING: 3,\n  INFO: 4\n};\nconst StyledToastIcon = styled.img`\n  margin-right: 10px;\n`;\n\nexport const showNotification = (message, type = NOTIFICATION_TYPE.INFO) => {\n  if (!message) {\n    return;\n  }\n  let notificationMethod;\n  let icon;\n  switch (type) {\n    case NOTIFICATION_TYPE.SUCCESS:\n      notificationMethod = notification.success;\n      icon = icSuccess;\n      break;\n    case NOTIFICATION_TYPE.ERROR:\n      notificationMethod = notification.error;\n      icon = icError;\n      break;\n    case NOTIFICATION_TYPE.WARNING:\n      notificationMethod = notification.warning;\n      icon = icWarning;\n      break;\n    default:\n      notificationMethod = notification.info;\n      icon = icWarning;\n  }\n  notificationMethod({\n    content: message,\n    icon: <StyledToastIcon src={icon} />\n  });\n};\n\nexport const getCognitoFormFields = props => {\n  const formFields = [\n    {\n      name: 'email',\n      value: props?.location?.state?.vetData?.email\n    }\n  ];\n\n  // eslint-disable-next-line no-unused-expressions\n  props?.location?.state?.userAttributes?.forEach(attr => {\n    if (attr.Name === 'given_name') {\n      formFields.push({\n        name: 'fullName',\n        value: attr.Value\n      });\n      formFields.push({\n        name: 'businessName',\n        value: attr.Value\n      });\n    } else if (attr.Name === 'phone_number') {\n      const { countryCode, strippedNumber } = getCountryCodeAndStrippedNumber(attr.Value);\n      formFields.push({\n        name: 'phone',\n        value: strippedNumber\n      });\n      formFields.push({\n        name: 'countryCode',\n        value: countryCode\n      });\n    }\n  });\n  return formFields;\n};\nexport const promisify = callback => {\n  return new Promise((resolve, reject) => callback(resolve, reject));\n};\nexport * from './validationUtils';\nexport * from './cognitoUtils';\nexport * from './canvasUtils';\nexport { loadable };\n\nexport function convertGqlResponse(res) {\n  return (res?.edges || []).map(a => a?.node).filter(a => !!a);\n}\n\nexport function renderSelectOptions(options = []) {\n  return options.map(function(ele, i) {\n    return (\n      <Option key={i} value={ele}>\n        {ele}\n      </Option>\n    );\n  });\n}\n","import { CognitoUserPool, AuthenticationDetails, CognitoUser, CognitoUserAttribute } from 'amazon-cognito-identity-js';\nimport { promisify } from '@utils';\n\nexport async function getUserAttributes() {\n  const cognitoUser = getUserPool().getCurrentUser();\n  return new Promise((resolve, reject) => {\n    cognitoUser.getSession((err, data) => {\n      if (err) {\n        return reject(err);\n      }\n      cognitoUser.getUserAttributes((err, data) => {\n        if (err) {\n          return reject(err);\n        }\n        resolve(data);\n      });\n    });\n  });\n}\n\n// signUp the user\nexport function signUp(email, password, fullName, phone, isBusiness = false, owner) {\n  return new Promise((resolve, reject) => {\n    const dataEmail = {\n      Name: 'email',\n      Value: email\n    };\n    const attributeEmail = new CognitoUserAttribute(dataEmail);\n\n    const dataGroup = {\n      Name: 'custom:group',\n      Value: owner ? 'group-owner' : 'group-vet'\n    };\n    const attributeGroup = new CognitoUserAttribute(dataGroup);\n\n    const attributeList = [];\n    attributeList.push(attributeEmail);\n    attributeList.push(attributeGroup);\n    attributeList.push(\n      new CognitoUserAttribute({\n        Name: 'custom:business',\n        Value: isBusiness.toString()\n      })\n    );\n    attributeList.push(\n      new CognitoUserAttribute({\n        Name: 'given_name',\n        Value: fullName\n      })\n    );\n    attributeList.push(\n      new CognitoUserAttribute({\n        Name: 'phone_number',\n        Value: phone\n      })\n    );\n\n    getUserPool().signUp(email, password, attributeList, null, function(err, result) {\n      if (err) {\n        reject(err);\n      }\n      resolve(result);\n    });\n  });\n}\n\n// confirmSignUp takes confirmation code and confirms the user\nexport function confirmSignUp(email, code) {\n  return new Promise((resolve, reject) => {\n    const pool = getUserPool();\n    const userData = {\n      Username: email,\n      Pool: pool\n    };\n    const curUser = new CognitoUser(userData);\n    if (curUser === null) {\n      const error = new Error({\n        code: 'NotAuthorizedException',\n        message: 'No user data is present',\n        name: 'NotAuthorizedException'\n      });\n      reject(error);\n    }\n    curUser.confirmRegistration(code, true, function(err, result) {\n      if (err) {\n        reject(err);\n      }\n      resolve(result);\n    });\n  });\n}\n\nexport function resendConfirmationCode(email) {\n  return new Promise((resolve, reject) => {\n    const pool = getUserPool();\n    const userData = {\n      Username: email,\n      Pool: pool\n    };\n    const curUser = new CognitoUser(userData);\n    if (curUser === null) {\n      const error = new Error({\n        code: 'NotAuthorizedException',\n        message: 'No user data is present',\n        name: 'NotAuthorizedException'\n      });\n      reject(error);\n    }\n\n    curUser.resendConfirmationCode(function(err, result) {\n      if (err) {\n        reject(err);\n      }\n      resolve(result);\n    });\n  });\n}\n\n// login the user\nexport function login(email, password) {\n  return new Promise((resolve, reject) => {\n    const authenticationData = {\n      Username: email,\n      Password: password\n    };\n    const authenticationDetails = new AuthenticationDetails(authenticationData);\n\n    const userData = {\n      Username: email,\n      Pool: getUserPool()\n    };\n    const cognitoUser = new CognitoUser(userData);\n\n    cognitoUser.authenticateUser(authenticationDetails, {\n      onSuccess: function(result) {\n        const accessToken = result.getAccessToken().getJwtToken();\n        const refreshToken = result.getRefreshToken().token;\n        const idToken = result.idToken.jwtToken;\n        resolve({\n          payload: {\n            accessToken,\n            refreshToken,\n            idToken\n          }\n        });\n      },\n\n      onFailure: function(err) {\n        reject(err);\n      }\n    });\n  });\n}\n\n// fetchAttributes establishes a session and gets the user Attributes.\nexport async function fetchAttributes() {\n  const curUser = getUserPool().getCurrentUser();\n\n  // fetchAttributes is called before login or signup\n  if (curUser === null) {\n    throw new Error({\n      code: 'NotAuthorizedException',\n      message: 'No user is logged in',\n      name: 'NotAuthorizedException'\n    });\n  }\n\n  // establish the session\n  await promisify((resolve, reject) => {\n    curUser.getSession(function(err, session) {\n      if (err) {\n        return reject(err);\n      } else if (!session.isValid()) {\n        const error = new Error('Session not Valid');\n        return reject(error);\n      }\n      resolve();\n    });\n  });\n\n  return promisify((resolve, reject) => {\n    // get stored user data\n    curUser.getUserAttributes(function(err, result) {\n      if (err) {\n        reject(err);\n      }\n      const attr = {};\n      for (let i = 0; i < result.length; i++) {\n        attr[result[i].getName()] = result[i].getValue();\n      }\n      resolve(attr);\n    });\n  });\n}\n\n// sign out the user and remove it from the userPool\nexport function signOut() {\n  return new Promise((resolve, reject) => {\n    const curUser = getUserPool().getCurrentUser();\n    if (curUser === null) {\n      resolve('No user was signed in');\n    }\n\n    const username = curUser.getUsername();\n    curUser.signOut();\n    resolve(`User: ${username} has been signed out`);\n  });\n}\n\n// forgotPass takes user's email to create cognitoUser and getCodeAndPass callback to get verificationCode and newPassword. getCodeAndPass should return an object with verificationCode and newPassword.\nexport function forgotPass(email) {\n  return new Promise((resolve, reject) => {\n    const userData = {\n      Username: email,\n      Pool: getUserPool()\n    };\n    const cognitoUser = new CognitoUser(userData);\n\n    cognitoUser.forgotPassword({\n      onSuccess: function(result) {\n        resolve(result);\n      },\n      onFailure: function(err) {\n        reject(err);\n      }\n    });\n  });\n}\n\nexport function confirmPassword(username, verificationCode, newPassword) {\n  const cognitoUser = new CognitoUser({\n    Username: username,\n    Pool: getUserPool()\n  });\n\n  return new Promise((resolve, reject) => {\n    cognitoUser.confirmPassword(verificationCode, newPassword, {\n      onSuccess: function(result) {\n        resolve(result);\n      },\n      onFailure: function(err) {\n        reject(err);\n      }\n    });\n  });\n}\n\nexport async function updatePhoneNumberRequest(username, newPhoneNumber) {\n  return new Promise((resolve, reject) => {\n    getCognitoUser().then(user =>\n      user.updateAttributes([{ Name: 'phone_number', Value: newPhoneNumber }], (err, data) => {\n        if (!err) {\n          user.getAttributeVerificationCode('phone_number', {\n            onSuccess: () => {},\n            onFailure: err => {\n              reject(err);\n            },\n            inputVerificationCode: data => {\n              resolve(data);\n            }\n          });\n        }\n      })\n    );\n  });\n}\n\nexport function verifyPhoneNumberRequest(username, verificationCode) {\n  return new Promise((resolve, reject) => {\n    getCognitoUser().then(user =>\n      user.verifyAttribute('phone_number', verificationCode, {\n        onSuccess: data => resolve(data),\n        onFailure: err => reject(err)\n      })\n    );\n  });\n}\n\nlet userPool;\nexport function getUserPool() {\n  if (!userPool) {\n    const poolData = {\n      UserPoolId: process.env.AWS_COGNITO_USER_POOL_ID,\n      ClientId: process.env.AWS_COGNITO_USER_POOL_APP_CLIENT\n    };\n    userPool = new CognitoUserPool(poolData);\n  }\n  return userPool;\n}\n\nexport function getUserPoolID() {\n  return process.env.AWS_COGNITO_USER_POOL_ID;\n}\n\nexport function getUserPoolAppClient() {\n  return process.env.AWS_COGNITO_USER_POOL_APP_CLIENT;\n}\n\nexport const COGNITO_ERROR_TYPES = {\n  USER_NOT_CONFIRMED_EXCEPTION: 'UserNotConfirmedException',\n  NOT_AUTHORIZED: 'NotAuthorizedException',\n  INVALID_PARAMETER_EXCEPTION: 'InvalidParameterException',\n  CODE_MISMATCH_EXCEPTION: 'CodeMismatchException',\n  USER_NOT_FOUND_EXCEPTION: 'UserNotFoundException'\n};\n\nexport const getCognitoUser = () => {\n  const cognitoUser = getUserPool().getCurrentUser();\n  return new Promise((resolve, reject) => {\n    cognitoUser.getSession((err, data) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(cognitoUser);\n    });\n  });\n};\nexport default {\n  COGNITO_ERROR_TYPES,\n  getUserPoolAppClient,\n  getUserPoolID,\n  getUserPool,\n  confirmPassword,\n  forgotPass,\n  getUserAttributes,\n  signOut,\n  fetchAttributes,\n  login,\n  resendConfirmationCode,\n  confirmSignUp,\n  signUp,\n  verifyPhoneNumberRequest,\n  updatePhoneNumberRequest\n};\n"],"names":["Option","styled","img","userPool","promisify","callback","Promise","resolve","reject","getUserAttributes","cognitoUser","getUserPool","getCurrentUser","getSession","err","data","signUp","email","password","fullName","phone","isBusiness","owner","attributeEmail","CognitoUserAttribute","Name","Value","attributeGroup","attributeList","push","toString","result","confirmSignUp","code","pool","curUser","CognitoUser","Username","Pool","error","Error","message","name","confirmRegistration","resendConfirmationCode","login","authenticationDetails","AuthenticationDetails","Password","userData","authenticateUser","onSuccess","accessToken","getAccessToken","getJwtToken","refreshToken","getRefreshToken","token","idToken","jwtToken","payload","onFailure","fetchAttributes","session","isValid","attr","i","length","getName","getValue","signOut","username","getUsername","forgotPass","forgotPassword","confirmPassword","verificationCode","newPassword","updatePhoneNumberRequest","newPhoneNumber","getCognitoUser","then","user","updateAttributes","getAttributeVerificationCode","inputVerificationCode","verifyPhoneNumberRequest","verifyAttribute","poolData","UserPoolId","process","env","AWS_COGNITO_USER_POOL_ID","ClientId","AWS_COGNITO_USER_POOL_APP_CLIENT","CognitoUserPool","getUserPoolID","getUserPoolAppClient","COGNITO_ERROR_TYPES","USER_NOT_CONFIRMED_EXCEPTION","NOT_AUTHORIZED","INVALID_PARAMETER_EXCEPTION","CODE_MISMATCH_EXCEPTION","USER_NOT_FOUND_EXCEPTION"],"mappings":"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"}